{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-22T14:28:13.480Z",
    "end": "2025-01-22T14:28:13.500Z",
    "duration": 20,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0f559196-71d0-41bb-a135-a79a92ce33cf",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
      "file": "\\src\\tests\\contract.agent.1.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e9ee21a-b520-407f-871a-d589ad4e5b8b",
          "title": "Negotiation Service Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
          "file": "\\src\\tests\\contract.agent.1.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Negotiation Service Test Cases\"",
              "fullTitle": "Negotiation Service Test Cases \"before each\" hook in \"Negotiation Service Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "negotiationService = NegotiationService_1.NegotiationService.retrieveService(true);\nprofile = new Profile_1.Profile({\n    uri: 'test-uri',\n    configurations: {\n        allowPolicies: true,\n        allowRecommendations: true,\n    },\n    preference: [\n        {\n            policies: [\n                { policy: 'allowed-policy', frequency: 1 },\n                { policy: 'another-policy', frequency: 1 },\n            ],\n            services: ['allowed-service'],\n            ecosystems: ['test-ecosystem'],\n        },\n    ],\n    recommendations: [],\n    matching: [],\n});\ncontract = new Contract_1.Contract({\n    ecosystem: 'test-ecosystem',\n    status: 'active',\n    serviceOfferings: [\n        {\n            participant: 'test-participant',\n            serviceOffering: 'allowed-service',\n            policies: [\n                {\n                    description: 'allowed-policy',\n                    permission: [],\n                    prohibition: [],\n                },\n            ],\n        },\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    members: [],\n    orchestrator: '',\n    purpose: [],\n    revokedMembers: [],\n    rolesAndObligations: [],\n});",
              "err": {},
              "uuid": "e6d2f467-2dab-4a91-ab63-33aa810b7aec",
              "parentUUID": "8e9ee21a-b520-407f-871a-d589ad4e5b8b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
              "title": "isPolicyAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should accept allowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be.true;",
                  "err": {},
                  "uuid": "654ee8f4-4f0e-4df4-98d9-0dccdb40a384",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject disallowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "b5df10a5-4436-4cb7-8ecb-bd83b8542d04",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject all policies when allowPolicies is false",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject all policies when allowPolicies is false",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.configurations.allowPolicies = false;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "e4391234-73ba-4c52-a0b4-f7d68818221b",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check policy frequency",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should check policy frequency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.preference[0].policies[0].frequency = 0;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7fbc61a2-19fd-44d9-be55-e336ea18da8e",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "654ee8f4-4f0e-4df4-98d9-0dccdb40a384",
                "b5df10a5-4436-4cb7-8ecb-bd83b8542d04",
                "e4391234-73ba-4c52-a0b4-f7d68818221b",
                "7fbc61a2-19fd-44d9-be55-e336ea18da8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
              "title": "isServiceAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should accept allowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .true;",
                  "err": {},
                  "uuid": "b487eb73-d934-472e-819f-d914920edf05",
                  "parentUUID": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should reject disallowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'disallowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .false;",
                  "err": {},
                  "uuid": "242ead31-935b-4976-8b2a-1776337c5795",
                  "parentUUID": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b487eb73-d934-472e-819f-d914920edf05",
                "242ead31-935b-4976-8b2a-1776337c5795"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
              "title": "canAcceptContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept valid contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should accept valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .true;",
                  "err": {},
                  "uuid": "de20672a-e03e-406b-8675-a6d944ff2ccc",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject inactive contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject inactive contract",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.status = 'inactive';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "96fcdb65-ad18-4ff1-974b-501af380557c",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable service offering",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable service offering",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7c3d7d01-d68e-4828-ad67-7dc4fd7df432",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7d4b48f4-bc0b-4f8e-8260-e0dfaf6c3117",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de20672a-e03e-406b-8675-a6d944ff2ccc",
                "96fcdb65-ad18-4ff1-974b-501af380557c",
                "7c3d7d01-d68e-4828-ad67-7dc4fd7df432",
                "7d4b48f4-bc0b-4f8e-8260-e0dfaf6c3117"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
              "title": "negotiateContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return successful negotiation for valid contract",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return successful negotiation for valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.true;\n(0, chai_1.expect)(result.reason).to.be.undefined;",
                  "err": {},
                  "uuid": "5ba19e67-84c1-433e-8edd-41905450abc9",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable policies",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.include('disallowed-policy');",
                  "err": {},
                  "uuid": "9abcdb0f-7cba-4f2f-807f-5e75a278fbd4",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable services",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptableServices).to.include('disallowed-service');",
                  "err": {},
                  "uuid": "00954b7b-b164-4c4f-b244-95e4c2f373d0",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors during negotiation",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should handle errors during negotiation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const corruptedContract = null;\nconst result = negotiationService.negotiateContract(profile, corruptedContract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.reason).to.equal('An error occurred during negotiation.');",
                  "err": {},
                  "uuid": "822f5e0a-c82a-4c09-bd1a-6be3bf28cee9",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify multiple unacceptable policies and services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should identify multiple unacceptable policies and services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings = [\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-1',\n        policies: [\n            {\n                description: 'disallowed-policy-1',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-2',\n        policies: [\n            {\n                description: 'disallowed-policy-2',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n];\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.have.members([\n    'disallowed-policy-1',\n    'disallowed-policy-2',\n]);\n(0, chai_1.expect)(result.unacceptableServices).to.have.members([\n    'disallowed-service-1',\n    'disallowed-service-2',\n]);",
                  "err": {},
                  "uuid": "73012375-0d7b-451e-a499-ba21db7216d0",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ba19e67-84c1-433e-8edd-41905450abc9",
                "9abcdb0f-7cba-4f2f-807f-5e75a278fbd4",
                "00954b7b-b164-4c4f-b244-95e4c2f373d0",
                "822f5e0a-c82a-4c09-bd1a-6be3bf28cee9",
                "73012375-0d7b-451e-a499-ba21db7216d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
              "title": "areServicePoliciesAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept service with acceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should accept service with acceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'allowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.true;",
                  "err": {},
                  "uuid": "609d749b-0040-4322-a937-ba6088142e20",
                  "parentUUID": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject service with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should reject service with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'disallowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.false;",
                  "err": {},
                  "uuid": "0d360f54-c2e5-415e-81df-87b8619f27c5",
                  "parentUUID": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "609d749b-0040-4322-a937-ba6088142e20",
                "0d360f54-c2e5-415e-81df-87b8619f27c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "9dcda039-ef40-4638-8abf-7316269ea2ca",
              "title": "updateProfilePreferences",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add valid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should add valid preferences",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPreferences = [\n    {\n        policies: [{ policy: 'new-policy', frequency: 1 }],\n        services: ['new-service'],\n        ecosystems: ['new-ecosystem'],\n    },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, newPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength + 1);",
                  "err": {},
                  "uuid": "fe449f72-880b-46fe-8230-0274bee69c4e",
                  "parentUUID": "9dcda039-ef40-4638-8abf-7316269ea2ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter out invalid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should filter out invalid preferences",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidPreferences = [\n    undefined,\n    null,\n    { policies: null, services: [], ecosystems: [] },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, invalidPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength);",
                  "err": {},
                  "uuid": "39d361dd-c275-4d8b-93b3-8e21a0446f5a",
                  "parentUUID": "9dcda039-ef40-4638-8abf-7316269ea2ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe449f72-880b-46fe-8230-0274bee69c4e",
                "39d361dd-c275-4d8b-93b3-8e21a0446f5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "cb285819-d518-47ac-9c57-8346178a0e89",
              "title": "NegotiationService Singleton",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the same instance without refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return the same instance without refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService();\n(0, chai_1.expect)(instance1).to.equal(instance2);",
                  "err": {},
                  "uuid": "be69f281-9ba8-49da-a86e-d273656cafd5",
                  "parentUUID": "cb285819-d518-47ac-9c57-8346178a0e89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a new instance with refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return a new instance with refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService(true);\n(0, chai_1.expect)(instance1).to.not.equal(instance2);",
                  "err": {},
                  "uuid": "bbc0ea31-584a-4f2e-9482-4a92c447b4d4",
                  "parentUUID": "cb285819-d518-47ac-9c57-8346178a0e89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be69f281-9ba8-49da-a86e-d273656cafd5",
                "bbc0ea31-584a-4f2e-9482-4a92c447b4d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "contract.agent.1.spec.ts",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report/contract",
        "reportFilename": "contract.agent.1.spec.ts"
      },
      "version": "6.2.0"
    }
  }
}
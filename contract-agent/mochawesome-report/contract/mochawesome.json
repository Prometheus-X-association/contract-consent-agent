{
  "stats": {
    "suites": 12,
    "tests": 78,
    "passes": 78,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 78,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-01-22T14:26:29.053Z",
    "end": "2025-01-22T14:28:26.110Z",
    "duration": 117057
  },
  "results": [
    {
      "uuid": "b5ccb29b-e9a6-48d1-a033-e07b7959606b",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.0.spec.ts",
      "file": "\\src\\tests\\contract.agent.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "377b693f-d6ac-4fc7-8af1-692c8b8e3d2f",
          "title": "Contract Agent Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.0.spec.ts",
          "file": "\\src\\tests\\contract.agent.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Contract Agent Test Cases\"",
              "fullTitle": "Contract Agent Test Cases \"before all\" hook in \"Contract Agent Test Cases\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    contractAgent = yield ContractAgent_1.ContractAgent.retrieveService();\n    contractProvider = contractAgent.getDataProvider('contracts');\n    updateProfileFromContractChangeSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileFromContractChange');\n    updateProfilesForMembersSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfilesForMembers');\n    updateProfilesForServiceOfferingsSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfilesForServiceOfferings');\n    updateProfileForOrchestratorSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileForOrchestrator');\n    updateProfileSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfile');\n});",
              "err": {},
              "uuid": "587b312d-dc63-4b9a-bfbc-2a01f09be927",
              "parentUUID": "377b693f-d6ac-4fc7-8af1-692c8b8e3d2f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Contract Agent Test Cases\"",
              "fullTitle": "Contract Agent Test Cases \"after all\" hook in \"Contract Agent Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    updateProfileFromContractChangeSpy.restore();\n    updateProfilesForMembersSpy.restore();\n    updateProfilesForServiceOfferingsSpy.restore();\n    updateProfileForOrchestratorSpy.restore();\n    updateProfileSpy.restore();\n});",
              "err": {},
              "uuid": "786456e3-4e87-4079-99f4-f127ce5efc1e",
              "parentUUID": "377b693f-d6ac-4fc7-8af1-692c8b8e3d2f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should verify the flow for creating a contract and updating profiles",
              "fullTitle": "Contract Agent Test Cases should verify the flow for creating a contract and updating profiles",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    createdDocument = yield contractProvider.create(contract_mock_1.ContractBase);\n    (0, chai_1.expect)(createdDocument).to.have.property('_id');\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n    (0, chai_1.expect)(updateProfileFromContractChangeSpy.calledOnce).to.be.true;\n    sinon_1.default.assert.calledOnce(updateProfilesForMembersSpy);\n    sinon_1.default.assert.calledOnce(updateProfilesForServiceOfferingsSpy);\n    sinon_1.default.assert.calledOnce(updateProfileForOrchestratorSpy);\n    sinon_1.default.assert.callCount(updateProfileSpy, contract_mock_1.ContractBase.members.length + contract_mock_1.ContractBase.serviceOfferings.length + 1);\n});",
              "err": {},
              "uuid": "ba7561e8-5a54-43b9-9492-8f0572699aa0",
              "parentUUID": "377b693f-d6ac-4fc7-8af1-692c8b8e3d2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the previously created contract successfully",
              "fullTitle": "Contract Agent Test Cases should delete the previously created contract successfully",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    (0, chai_1.expect)(createdDocument).to.not.be.undefined;\n    const deleteResult = yield contractProvider.delete(createdDocument._id.toString());\n    (0, chai_1.expect)(deleteResult).to.be.true;\n    const secondDeleteResult = yield contractProvider.delete(createdDocument._id.toString());\n    (0, chai_1.expect)(secondDeleteResult).to.be.false;\n});",
              "err": {},
              "uuid": "c306b132-5ffb-41cb-aaac-a567a775f8c1",
              "parentUUID": "377b693f-d6ac-4fc7-8af1-692c8b8e3d2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba7561e8-5a54-43b9-9492-8f0572699aa0",
            "c306b132-5ffb-41cb-aaac-a567a775f8c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "0f559196-71d0-41bb-a135-a79a92ce33cf",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
      "file": "\\src\\tests\\contract.agent.1.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e9ee21a-b520-407f-871a-d589ad4e5b8b",
          "title": "Negotiation Service Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
          "file": "\\src\\tests\\contract.agent.1.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Negotiation Service Test Cases\"",
              "fullTitle": "Negotiation Service Test Cases \"before each\" hook in \"Negotiation Service Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "negotiationService = NegotiationService_1.NegotiationService.retrieveService(true);\nprofile = new Profile_1.Profile({\n    uri: 'test-uri',\n    configurations: {\n        allowPolicies: true,\n        allowRecommendations: true,\n    },\n    preference: [\n        {\n            policies: [\n                { policy: 'allowed-policy', frequency: 1 },\n                { policy: 'another-policy', frequency: 1 },\n            ],\n            services: ['allowed-service'],\n            ecosystems: ['test-ecosystem'],\n        },\n    ],\n    recommendations: [],\n    matching: [],\n});\ncontract = new Contract_1.Contract({\n    ecosystem: 'test-ecosystem',\n    status: 'active',\n    serviceOfferings: [\n        {\n            participant: 'test-participant',\n            serviceOffering: 'allowed-service',\n            policies: [\n                {\n                    description: 'allowed-policy',\n                    permission: [],\n                    prohibition: [],\n                },\n            ],\n        },\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    members: [],\n    orchestrator: '',\n    purpose: [],\n    revokedMembers: [],\n    rolesAndObligations: [],\n});",
              "err": {},
              "uuid": "e6d2f467-2dab-4a91-ab63-33aa810b7aec",
              "parentUUID": "8e9ee21a-b520-407f-871a-d589ad4e5b8b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
              "title": "isPolicyAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should accept allowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be.true;",
                  "err": {},
                  "uuid": "654ee8f4-4f0e-4df4-98d9-0dccdb40a384",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject disallowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "b5df10a5-4436-4cb7-8ecb-bd83b8542d04",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject all policies when allowPolicies is false",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject all policies when allowPolicies is false",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.configurations.allowPolicies = false;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "e4391234-73ba-4c52-a0b4-f7d68818221b",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check policy frequency",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should check policy frequency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.preference[0].policies[0].frequency = 0;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7fbc61a2-19fd-44d9-be55-e336ea18da8e",
                  "parentUUID": "ff4b63b3-a77f-46c1-aa43-65b2d7af59bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "654ee8f4-4f0e-4df4-98d9-0dccdb40a384",
                "b5df10a5-4436-4cb7-8ecb-bd83b8542d04",
                "e4391234-73ba-4c52-a0b4-f7d68818221b",
                "7fbc61a2-19fd-44d9-be55-e336ea18da8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
              "title": "isServiceAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should accept allowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .true;",
                  "err": {},
                  "uuid": "b487eb73-d934-472e-819f-d914920edf05",
                  "parentUUID": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should reject disallowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'disallowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .false;",
                  "err": {},
                  "uuid": "242ead31-935b-4976-8b2a-1776337c5795",
                  "parentUUID": "3a3e671a-2c65-4bb4-8a4a-ec894209358d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b487eb73-d934-472e-819f-d914920edf05",
                "242ead31-935b-4976-8b2a-1776337c5795"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
              "title": "canAcceptContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept valid contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should accept valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .true;",
                  "err": {},
                  "uuid": "de20672a-e03e-406b-8675-a6d944ff2ccc",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject inactive contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject inactive contract",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.status = 'inactive';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "96fcdb65-ad18-4ff1-974b-501af380557c",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable service offering",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable service offering",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7c3d7d01-d68e-4828-ad67-7dc4fd7df432",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "7d4b48f4-bc0b-4f8e-8260-e0dfaf6c3117",
                  "parentUUID": "a71875bc-bd97-41a3-a1b2-d034e9c9fc6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de20672a-e03e-406b-8675-a6d944ff2ccc",
                "96fcdb65-ad18-4ff1-974b-501af380557c",
                "7c3d7d01-d68e-4828-ad67-7dc4fd7df432",
                "7d4b48f4-bc0b-4f8e-8260-e0dfaf6c3117"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
              "title": "negotiateContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return successful negotiation for valid contract",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return successful negotiation for valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.true;\n(0, chai_1.expect)(result.reason).to.be.undefined;",
                  "err": {},
                  "uuid": "5ba19e67-84c1-433e-8edd-41905450abc9",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable policies",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.include('disallowed-policy');",
                  "err": {},
                  "uuid": "9abcdb0f-7cba-4f2f-807f-5e75a278fbd4",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable services",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptableServices).to.include('disallowed-service');",
                  "err": {},
                  "uuid": "00954b7b-b164-4c4f-b244-95e4c2f373d0",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors during negotiation",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should handle errors during negotiation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const corruptedContract = null;\nconst result = negotiationService.negotiateContract(profile, corruptedContract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.reason).to.equal('An error occurred during negotiation.');",
                  "err": {},
                  "uuid": "822f5e0a-c82a-4c09-bd1a-6be3bf28cee9",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify multiple unacceptable policies and services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should identify multiple unacceptable policies and services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings = [\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-1',\n        policies: [\n            {\n                description: 'disallowed-policy-1',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-2',\n        policies: [\n            {\n                description: 'disallowed-policy-2',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n];\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.have.members([\n    'disallowed-policy-1',\n    'disallowed-policy-2',\n]);\n(0, chai_1.expect)(result.unacceptableServices).to.have.members([\n    'disallowed-service-1',\n    'disallowed-service-2',\n]);",
                  "err": {},
                  "uuid": "73012375-0d7b-451e-a499-ba21db7216d0",
                  "parentUUID": "6808dd09-f698-4bf2-a6c6-ee6527432a05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ba19e67-84c1-433e-8edd-41905450abc9",
                "9abcdb0f-7cba-4f2f-807f-5e75a278fbd4",
                "00954b7b-b164-4c4f-b244-95e4c2f373d0",
                "822f5e0a-c82a-4c09-bd1a-6be3bf28cee9",
                "73012375-0d7b-451e-a499-ba21db7216d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
              "title": "areServicePoliciesAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept service with acceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should accept service with acceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'allowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.true;",
                  "err": {},
                  "uuid": "609d749b-0040-4322-a937-ba6088142e20",
                  "parentUUID": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject service with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should reject service with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'disallowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.false;",
                  "err": {},
                  "uuid": "0d360f54-c2e5-415e-81df-87b8619f27c5",
                  "parentUUID": "480ac7b2-a91d-426d-a642-4f1f3b004c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "609d749b-0040-4322-a937-ba6088142e20",
                "0d360f54-c2e5-415e-81df-87b8619f27c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "9dcda039-ef40-4638-8abf-7316269ea2ca",
              "title": "updateProfilePreferences",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add valid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should add valid preferences",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPreferences = [\n    {\n        policies: [{ policy: 'new-policy', frequency: 1 }],\n        services: ['new-service'],\n        ecosystems: ['new-ecosystem'],\n    },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, newPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength + 1);",
                  "err": {},
                  "uuid": "fe449f72-880b-46fe-8230-0274bee69c4e",
                  "parentUUID": "9dcda039-ef40-4638-8abf-7316269ea2ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter out invalid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should filter out invalid preferences",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidPreferences = [\n    undefined,\n    null,\n    { policies: null, services: [], ecosystems: [] },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, invalidPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength);",
                  "err": {},
                  "uuid": "39d361dd-c275-4d8b-93b3-8e21a0446f5a",
                  "parentUUID": "9dcda039-ef40-4638-8abf-7316269ea2ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe449f72-880b-46fe-8230-0274bee69c4e",
                "39d361dd-c275-4d8b-93b3-8e21a0446f5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "cb285819-d518-47ac-9c57-8346178a0e89",
              "title": "NegotiationService Singleton",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the same instance without refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return the same instance without refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService();\n(0, chai_1.expect)(instance1).to.equal(instance2);",
                  "err": {},
                  "uuid": "be69f281-9ba8-49da-a86e-d273656cafd5",
                  "parentUUID": "cb285819-d518-47ac-9c57-8346178a0e89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a new instance with refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return a new instance with refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService(true);\n(0, chai_1.expect)(instance1).to.not.equal(instance2);",
                  "err": {},
                  "uuid": "bbc0ea31-584a-4f2e-9482-4a92c447b4d4",
                  "parentUUID": "cb285819-d518-47ac-9c57-8346178a0e89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be69f281-9ba8-49da-a86e-d273656cafd5",
                "bbc0ea31-584a-4f2e-9482-4a92c447b4d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "f86012d9-5746-458b-8e92-ad0fcd4b9025",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.3.spec.ts",
      "file": "\\src\\tests\\contract.agent.3.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
          "title": "MongooseProvider Events Tests",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.3.spec.ts",
          "file": "\\src\\tests\\contract.agent.3.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"before all\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        provider = new MongooseProvider_1.MongooseProvider({\n            source: 'contracts',\n            url: 'mongodb://localhost:27017',\n            dbName: 'test',\n        });\n        provider.on('dataInserted', (event) => {\n            dataInsertedEventReceived = true;\n            dataInsertedPayload = event;\n        });\n        provider.on('dataUpdated', (event) => {\n            dataUpdatedEventReceived = true;\n            dataUpdatedPayload = event;\n        });\n        provider.on('dataDeleted', (event) => {\n            dataDeletedEventReceived = true;\n            dataDeletedPayload = event;\n        });\n        model = yield contract_model_mock_1.default.getModel();\n        yield provider.ensureReady();\n    })",
              "err": {},
              "uuid": "21d0e84b-581e-44d3-8552-5e2db42914ce",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"before each\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        dataInsertedEventReceived = false;\n        dataInsertedPayload = null;\n        dataUpdatedEventReceived = false;\n        dataUpdatedPayload = null;\n        dataDeletedEventReceived = false;\n        dataDeletedPayload = null;\n        yield model.deleteMany({});\n    })",
              "err": {},
              "uuid": "696f35f3-60a5-4eef-97df-f205bcd96140",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"after all\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 70,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield model.deleteMany({});\n        yield mongoose_1.default.disconnect();\n    })",
              "err": {},
              "uuid": "63fd89b6-e5a9-4b78-8c70-21f8ed1362ed",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should emit dataInserted event when saving a new document",
              "fullTitle": "MongooseProvider Events Tests should emit dataInserted event when saving a new document",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contractData = {\n            uid: 'test-contract-1',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            members: [\n                {\n                    participant: 'test-participant',\n                    role: 'test-role',\n                    signature: 'test-signature',\n                },\n            ],\n            status: 'pending',\n            serviceOfferings: [],\n            rolesAndObligations: [],\n            purpose: [],\n            revokedMembers: [],\n        };\n        const contract = new model(contractData);\n        yield contract.save();\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataInsertedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataInsertedPayload).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument.uid).to.equal(contractData.uid);\n    })",
              "err": {},
              "uuid": "fb7c5bfd-4159-4972-aaff-f56a0b1b32d6",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataInserted event when creating via model.create()",
              "fullTitle": "MongooseProvider Events Tests should emit dataInserted event when creating via model.create()",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contractData = {\n            uid: 'test-contract-1',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            members: [\n                {\n                    participant: 'test-participant',\n                    role: 'test-role',\n                    signature: 'test-signature',\n                },\n            ],\n            status: 'pending',\n            serviceOfferings: [],\n            rolesAndObligations: [],\n            purpose: [],\n            revokedMembers: [],\n        };\n        yield model.create(contractData);\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataInsertedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataInsertedPayload).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument.uid).to.equal(contractData.uid);\n    })",
              "err": {},
              "uuid": "04879960-b8b8-4b6d-a389-bb221622c811",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataUpdated event when updating via model.updateOne()",
              "fullTitle": "MongooseProvider Events Tests should emit dataUpdated event when updating via model.updateOne()",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contract = yield model.create({\n            uid: 'test-contract-2',\n            profile: 'old-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            status: 'pending',\n        });\n        yield model.updateOne({ _id: contract._id }, { $set: { profile: 'new-profile' } });\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataUpdatedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataUpdatedPayload).to.exist;\n        (0, chai_1.expect)(dataUpdatedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataUpdatedPayload.updateDescription).to.exist;\n    })",
              "err": {},
              "uuid": "da936162-f31d-4883-8888-677805732250",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataDeleted event when deleting via model.deleteOne()",
              "fullTitle": "MongooseProvider Events Tests should emit dataDeleted event when deleting via model.deleteOne()",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contract = yield model.create({\n            uid: 'test-contract-3',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            status: 'pending',\n        });\n        yield model.deleteOne({ _id: contract._id });\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataDeletedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataDeletedPayload).to.exist;\n        (0, chai_1.expect)(dataDeletedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataDeletedPayload.documentKey).to.exist;\n    })",
              "err": {},
              "uuid": "e180396f-c8f3-44aa-a97b-6081ae675b88",
              "parentUUID": "c191771c-3bc6-4477-8104-d7a25dfd8a64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb7c5bfd-4159-4972-aaff-f56a0b1b32d6",
            "04879960-b8b8-4b6d-a389-bb221622c811",
            "da936162-f31d-4883-8888-677805732250",
            "e180396f-c8f3-44aa-a97b-6081ae675b88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 543,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "a2d5973a-cc9d-4cc3-a037-df718fbfc62a",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.4.spec.ts",
      "file": "\\src\\tests\\contract.agent.4.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "df100d28-e84e-47c5-8376-767fa469898d",
          "title": "ContractAgent with MongooseProvider",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.4.spec.ts",
          "file": "\\src\\tests\\contract.agent.4.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ContractAgent with MongooseProvider\"",
              "fullTitle": "ContractAgent with MongooseProvider \"before all\" hook in \"ContractAgent with MongooseProvider\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    model = yield contract_model_mock_1.default.getModel();\n    agent = yield ContractAgent_1.ContractAgent.retrieveService(MongooseProvider_1.MongooseProvider);\n    updateProfileFromContractChangeSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileFromContractChange');\n});",
              "err": {},
              "uuid": "ea75a52c-be6f-4efc-a33c-a2889a0d1740",
              "parentUUID": "df100d28-e84e-47c5-8376-767fa469898d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"ContractAgent with MongooseProvider\"",
              "fullTitle": "ContractAgent with MongooseProvider \"after all\" hook in \"ContractAgent with MongooseProvider\"",
              "timedOut": false,
              "duration": 1011,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    updateProfileFromContractChangeSpy.restore();\n    if (model) {\n        yield model.deleteMany({});\n    }\n    yield Promise.all([\n        mongoose_1.default.disconnect(),\n        new Promise((resolve) => setTimeout(resolve, 1000)),\n    ]);\n});",
              "err": {},
              "uuid": "8c52494e-d4a7-4a8b-a830-c118ccbb151b",
              "parentUUID": "df100d28-e84e-47c5-8376-767fa469898d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should initialize correctly and trigger handleDataInserted via create",
              "fullTitle": "ContractAgent with MongooseProvider should initialize correctly and trigger handleDataInserted via create",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield model.create({\n        ecosystem: 'test-ecosystem',\n        serviceOfferings: [\n            {\n                participant: 'test-participant',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    {\n                        description: 'allowed-policy',\n                        permission: [],\n                        prohibition: [],\n                    },\n                ],\n            },\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "f4116c9e-0336-493c-a298-276820d6804d",
              "parentUUID": "df100d28-e84e-47c5-8376-767fa469898d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize correctly and trigger handleDataInserted via save",
              "fullTitle": "ContractAgent with MongooseProvider should initialize correctly and trigger handleDataInserted via save",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const contract = new model();\n    updateProfileFromContractChangeSpy.resetHistory();\n    yield contract.save({\n        ecosystem: 'test-ecosystem',\n        serviceOfferings: [\n            {\n                participant: 'test-participant',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    {\n                        description: 'allowed-policy',\n                        permission: [],\n                        prohibition: [],\n                    },\n                ],\n            },\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "3de672a6-4e81-4cf5-8f55-b0577e486a5c",
              "parentUUID": "df100d28-e84e-47c5-8376-767fa469898d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trigger updateProfileFromContractChange on update",
              "fullTitle": "ContractAgent with MongooseProvider should trigger updateProfileFromContractChange on update",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const doc = yield model.create({\n        ecosystem: 'test-ecosystem-update',\n        serviceOfferings: [\n            {\n                participant: 'test-participant-update',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    { description: 'allowed-policy', permission: [], prohibition: [] },\n                ],\n            },\n        ],\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    updateProfileFromContractChangeSpy.resetHistory();\n    yield model.findByIdAndUpdate(doc._id, {\n        $set: { ecosystem: 'updated-ecosystem' },\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "c69d6b50-1cc2-4bcc-a1bb-13a64811a2c5",
              "parentUUID": "df100d28-e84e-47c5-8376-767fa469898d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4116c9e-0336-493c-a298-276820d6804d",
            "3de672a6-4e81-4cf5-8f55-b0577e486a5c",
            "c69d6b50-1cc2-4bcc-a1bb-13a64811a2c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "15577657-1b2e-42d8-8b97-aad76e65e416",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.dataprovider.0.spec.ts",
      "file": "\\src\\tests\\contract.dataprovider.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "413a5596-35b5-4f9c-b74d-220ab23c3848",
          "title": "DataProvider Events Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.dataprovider.0.spec.ts",
          "file": "\\src\\tests\\contract.dataprovider.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DataProvider Events Test Cases\"",
              "fullTitle": "DataProvider Events Test Cases \"before all\" hook in \"DataProvider Events Test Cases\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const config = {\n        url: 'mongodb://localhost:27017',\n        dbName: 'contract_consent_agent_db',\n        source: collection,\n    };\n    mongoProvider = new MongoDBProvider_1.MongoDBProvider(config);\n    yield mongoProvider.ensureReady();\n    agentTest = new AgentTest(mongoProvider);\n});",
              "err": {},
              "uuid": "f129ce4b-bc2e-4965-9f09-7b491289299b",
              "parentUUID": "413a5596-35b5-4f9c-b74d-220ab23c3848",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"DataProvider Events Test Cases\"",
              "fullTitle": "DataProvider Events Test Cases \"after each\" hook in \"DataProvider Events Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agentTest.handleDataInsertedSpy.resetHistory();\nagentTest.handleDataUpdatedSpy.resetHistory();\nagentTest.handleDataDeletedSpy.resetHistory();",
              "err": {},
              "uuid": "6fe332ae-a0fe-41b2-93ed-dfe7fb21eb15",
              "parentUUID": "413a5596-35b5-4f9c-b74d-220ab23c3848",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should emit dataInserted event when creating a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataInserted event when creating a document",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test', value: 123 };\n    const result = yield mongoProvider.create(testData);\n    (0, chai_1.expect)(agentTest.handleDataInsertedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataInsertedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('fullDocument');\n    (0, chai_1.expect)(eventData.fullDocument).to.include(testData);\n    if (result._id) {\n        yield mongoProvider.delete(result._id.toString());\n    }\n});",
              "err": {},
              "uuid": "aa327e65-b0f3-4f09-a4af-060b3d6f2cee",
              "parentUUID": "413a5596-35b5-4f9c-b74d-220ab23c3848",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataUpdated event when updating a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataUpdated event when updating a document",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test-update', value: 456 };\n    const created = yield mongoProvider.create(testData);\n    agentTest.handleDataInsertedSpy.resetHistory();\n    const updateData = { value: 789 };\n    const criteria = {\n        conditions: [\n            {\n                field: '_id',\n                operator: types_1.FilterOperator.EQUALS,\n                value: created._id,\n            },\n        ],\n        threshold: 0,\n    };\n    yield mongoProvider.update(criteria, updateData);\n    (0, chai_1.expect)(agentTest.handleDataUpdatedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataUpdatedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('documentKey');\n    (0, chai_1.expect)(eventData).to.have.property('updateDescription');\n    if (created._id) {\n        yield mongoProvider.delete(created._id.toString());\n    }\n});",
              "err": {},
              "uuid": "3f3aac91-cb6c-4a3b-a82c-589556e04657",
              "parentUUID": "413a5596-35b5-4f9c-b74d-220ab23c3848",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataDeleted event when deleting a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataDeleted event when deleting a document",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test-delete', value: 999 };\n    const created = yield mongoProvider.create(testData);\n    agentTest.handleDataInsertedSpy.resetHistory();\n    if (created._id) {\n        yield mongoProvider.delete(created._id.toString());\n    }\n    (0, chai_1.expect)(agentTest.handleDataDeletedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataDeletedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('documentKey');\n});",
              "err": {},
              "uuid": "1313fa5c-d011-4d11-a850-68720004226a",
              "parentUUID": "413a5596-35b5-4f9c-b74d-220ab23c3848",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa327e65-b0f3-4f09-a4af-060b3d6f2cee",
            "3f3aac91-cb6c-4a3b-a82c-589556e04657",
            "1313fa5c-d011-4d11-a850-68720004226a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "458d0648-cb96-476b-90cf-c60521e0b424",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.router.0.spec.ts",
      "file": "\\src\\tests\\contract.router.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d02517dc-9213-48b1-8a69-1e4d742067c8",
          "title": "ContractAgent Router Tests",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.router.0.spec.ts",
          "file": "\\src\\tests\\contract.router.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ContractAgent Router Tests\"",
              "fullTitle": "ContractAgent Router Tests \"before all\" hook in \"ContractAgent Router Tests\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    requestHandler = yield ContractAgentHandler_1.RequestHandler.retrieveService();\n    const contractAgent = yield requestHandler.getContractAgent();\n    const profile = yield contractAgent.createProfileForParticipant('some-participant-uri');\n    profileURI = (_a = profile.uri) !== null && _a !== void 0 ? _a : profileURI;\n    getPoliciesRecommendationFromProfileSpy = sinon_1.default.spy(requestHandler, 'getPoliciesRecommendationFromProfile');\n    getServicesRecommendationFromProfileSpy = sinon_1.default.spy(requestHandler, 'getServicesRecommendationFromProfile');\n    getPoliciesMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getPoliciesMatchingFromProfile');\n    getServicesMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getServicesMatchingFromProfile');\n    getContractMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getContractMatchingFromProfile');\n    getConfigurationsFromProfileSpy = sinon_1.default.spy(requestHandler, 'getConfigurationsFromProfile');\n    addConfigurationsToProfileSpy = sinon_1.default.spy(requestHandler, 'addConfigurationsToProfile');\n    updateConfigurationsForProfileSpy = sinon_1.default.spy(requestHandler, 'updateConfigurationsForProfile');\n    removeConfigurationsFromProfileSpy = sinon_1.default.spy(requestHandler, 'removeConfigurationsFromProfile');\n});",
              "err": {},
              "uuid": "aa4c8d93-2de1-4817-9ce0-1850d94d98b0",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"ContractAgent Router Tests\"",
              "fullTitle": "ContractAgent Router Tests \"after all\" hook in \"ContractAgent Router Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getPoliciesRecommendationFromProfileSpy.restore();\ngetServicesRecommendationFromProfileSpy.restore();\ngetPoliciesMatchingFromProfileSpy.restore();\ngetServicesMatchingFromProfileSpy.restore();\ngetContractMatchingFromProfileSpy.restore();\ngetConfigurationsFromProfileSpy.restore();\naddConfigurationsToProfileSpy.restore();\nupdateConfigurationsForProfileSpy.restore();\nremoveConfigurationsFromProfileSpy.restore();",
              "err": {},
              "uuid": "b7649943-dc2f-437f-b3e2-9022df211b81",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get policies recommendations from profile",
              "fullTitle": "ContractAgent Router Tests should get policies recommendations from profile",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/policies-recommendations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getPoliciesRecommendationFromProfileSpy);\n    sinon_1.default.assert.calledWith(getPoliciesRecommendationFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "b1fde2d9-27bf-43af-81f2-34b8b4481918",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get services recommendations from profile",
              "fullTitle": "ContractAgent Router Tests should get services recommendations from profile",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/services-recommendations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getServicesRecommendationFromProfileSpy);\n    sinon_1.default.assert.calledWith(getServicesRecommendationFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "d9e09bc2-ceda-45a3-a1a5-c6dc8a9323fe",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get policies matching from profile",
              "fullTitle": "ContractAgent Router Tests should get policies matching from profile",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/policies-matching`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getPoliciesMatchingFromProfileSpy);\n    sinon_1.default.assert.calledWith(getPoliciesMatchingFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "6015de06-b8f1-495f-a9df-14daebec4356",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle adding configurations to profile",
              "fullTitle": "ContractAgent Router Tests should handle adding configurations to profile",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const configurations = [{ configId: 'config1' }];\n    const response = yield (0, supertest_1.default)(app)\n        .post('/api/profile/configurations')\n        .send({ profileURI, configurations })\n        .expect(201);\n    sinon_1.default.assert.calledOnce(addConfigurationsToProfileSpy);\n    sinon_1.default.assert.calledWith(addConfigurationsToProfileSpy, profileURI, configurations);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "8047de84-4043-4004-b987-0dc6239e2c9a",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle updating configurations for profile",
              "fullTitle": "ContractAgent Router Tests should handle updating configurations for profile",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const configurations = [{ configId: 'config2' }];\n    const response = yield (0, supertest_1.default)(app)\n        .put(`/api/profile/${profileURI}/configurations`)\n        .send({ configurations })\n        .expect(200);\n    sinon_1.default.assert.calledOnce(updateConfigurationsForProfileSpy);\n    sinon_1.default.assert.calledWith(updateConfigurationsForProfileSpy, profileURI, configurations);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "f127e11f-ffbe-469c-a13f-1e1520e8e452",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle deleting configurations from profile",
              "fullTitle": "ContractAgent Router Tests should handle deleting configurations from profile",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .delete(`/api/profile/${profileURI}/configurations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(removeConfigurationsFromProfileSpy);\n    sinon_1.default.assert.calledWith(removeConfigurationsFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "6eac6bfe-3b61-4773-bf4b-f5a51ed1937d",
              "parentUUID": "d02517dc-9213-48b1-8a69-1e4d742067c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1fde2d9-27bf-43af-81f2-34b8b4481918",
            "d9e09bc2-ceda-45a3-a1a5-c6dc8a9323fe",
            "6015de06-b8f1-495f-a9df-14daebec4356",
            "8047de84-4043-4004-b987-0dc6239e2c9a",
            "f127e11f-ffbe-469c-a13f-1e1520e8e452",
            "6eac6bfe-3b61-4773-bf4b-f5a51ed1937d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 89,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "72d2f4e4-aa3b-445f-b19f-d480be9ebac2",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.0.spec.ts",
      "file": "\\src\\tests\\contract.agent.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "53b6a0ee-eb01-4c20-8dc8-c1a77270bf00",
          "title": "Contract Agent Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.0.spec.ts",
          "file": "\\src\\tests\\contract.agent.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Contract Agent Test Cases\"",
              "fullTitle": "Contract Agent Test Cases \"before all\" hook in \"Contract Agent Test Cases\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    contractAgent = yield ContractAgent_1.ContractAgent.retrieveService();\n    contractProvider = contractAgent.getDataProvider('contracts');\n    updateProfileFromContractChangeSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileFromContractChange');\n    updateProfilesForMembersSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfilesForMembers');\n    updateProfilesForServiceOfferingsSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfilesForServiceOfferings');\n    updateProfileForOrchestratorSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileForOrchestrator');\n    updateProfileSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfile');\n});",
              "err": {},
              "uuid": "e671d491-a527-4396-9ebd-88687d09de17",
              "parentUUID": "53b6a0ee-eb01-4c20-8dc8-c1a77270bf00",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Contract Agent Test Cases\"",
              "fullTitle": "Contract Agent Test Cases \"after all\" hook in \"Contract Agent Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    updateProfileFromContractChangeSpy.restore();\n    updateProfilesForMembersSpy.restore();\n    updateProfilesForServiceOfferingsSpy.restore();\n    updateProfileForOrchestratorSpy.restore();\n    updateProfileSpy.restore();\n});",
              "err": {},
              "uuid": "8aa2d4c4-48a8-4056-ac9c-8124e014d73d",
              "parentUUID": "53b6a0ee-eb01-4c20-8dc8-c1a77270bf00",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should verify the flow for creating a contract and updating profiles",
              "fullTitle": "Contract Agent Test Cases should verify the flow for creating a contract and updating profiles",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    createdDocument = yield contractProvider.create(contract_mock_1.ContractBase);\n    (0, chai_1.expect)(createdDocument).to.have.property('_id');\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n    (0, chai_1.expect)(updateProfileFromContractChangeSpy.calledOnce).to.be.true;\n    sinon_1.default.assert.calledOnce(updateProfilesForMembersSpy);\n    sinon_1.default.assert.calledOnce(updateProfilesForServiceOfferingsSpy);\n    sinon_1.default.assert.calledOnce(updateProfileForOrchestratorSpy);\n    sinon_1.default.assert.callCount(updateProfileSpy, contract_mock_1.ContractBase.members.length + contract_mock_1.ContractBase.serviceOfferings.length + 1);\n});",
              "err": {},
              "uuid": "1eb23396-99ac-411e-99a6-7e6b1eed1c33",
              "parentUUID": "53b6a0ee-eb01-4c20-8dc8-c1a77270bf00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the previously created contract successfully",
              "fullTitle": "Contract Agent Test Cases should delete the previously created contract successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    (0, chai_1.expect)(createdDocument).to.not.be.undefined;\n    const deleteResult = yield contractProvider.delete(createdDocument._id.toString());\n    (0, chai_1.expect)(deleteResult).to.be.true;\n    const secondDeleteResult = yield contractProvider.delete(createdDocument._id.toString());\n    (0, chai_1.expect)(secondDeleteResult).to.be.false;\n});",
              "err": {},
              "uuid": "24521e40-5f5f-424e-b35d-e62634b89962",
              "parentUUID": "53b6a0ee-eb01-4c20-8dc8-c1a77270bf00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1eb23396-99ac-411e-99a6-7e6b1eed1c33",
            "24521e40-5f5f-424e-b35d-e62634b89962"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "857b369f-6fd8-4001-a1d0-914c16a43661",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
      "file": "\\src\\tests\\contract.agent.1.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66a7368a-ef07-4556-aa78-e7c2fe8d7f67",
          "title": "Negotiation Service Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
          "file": "\\src\\tests\\contract.agent.1.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Negotiation Service Test Cases\"",
              "fullTitle": "Negotiation Service Test Cases \"before each\" hook in \"Negotiation Service Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "negotiationService = NegotiationService_1.NegotiationService.retrieveService(true);\nprofile = new Profile_1.Profile({\n    uri: 'test-uri',\n    configurations: {\n        allowPolicies: true,\n        allowRecommendations: true,\n    },\n    preference: [\n        {\n            policies: [\n                { policy: 'allowed-policy', frequency: 1 },\n                { policy: 'another-policy', frequency: 1 },\n            ],\n            services: ['allowed-service'],\n            ecosystems: ['test-ecosystem'],\n        },\n    ],\n    recommendations: [],\n    matching: [],\n});\ncontract = new Contract_1.Contract({\n    ecosystem: 'test-ecosystem',\n    status: 'active',\n    serviceOfferings: [\n        {\n            participant: 'test-participant',\n            serviceOffering: 'allowed-service',\n            policies: [\n                {\n                    description: 'allowed-policy',\n                    permission: [],\n                    prohibition: [],\n                },\n            ],\n        },\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    members: [],\n    orchestrator: '',\n    purpose: [],\n    revokedMembers: [],\n    rolesAndObligations: [],\n});",
              "err": {},
              "uuid": "49a75ed7-714f-4819-a3b6-f068e26721a6",
              "parentUUID": "66a7368a-ef07-4556-aa78-e7c2fe8d7f67",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5dd583b6-0ab0-4f81-81d7-982643a6f3ad",
              "title": "isPolicyAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should accept allowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be.true;",
                  "err": {},
                  "uuid": "3dc805ba-163b-463e-80b0-c1e41c96f578",
                  "parentUUID": "5dd583b6-0ab0-4f81-81d7-982643a6f3ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed policy",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject disallowed policy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = {\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "5789eba0-814a-408a-bdbc-836ea46317a3",
                  "parentUUID": "5dd583b6-0ab0-4f81-81d7-982643a6f3ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject all policies when allowPolicies is false",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should reject all policies when allowPolicies is false",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.configurations.allowPolicies = false;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "d32bb22a-fcde-409f-98c0-498ee861bf58",
                  "parentUUID": "5dd583b6-0ab0-4f81-81d7-982643a6f3ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check policy frequency",
                  "fullTitle": "Negotiation Service Test Cases isPolicyAcceptable should check policy frequency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "profile.preference[0].policies[0].frequency = 0;\nconst policy = {\n    description: 'allowed-policy',\n    permission: [],\n    prohibition: [],\n};\n(0, chai_1.expect)(negotiationService.isPolicyAcceptable(profile, policy)).to.be\n    .false;",
                  "err": {},
                  "uuid": "96ad3481-5258-45d9-9cae-6e7f782caee3",
                  "parentUUID": "5dd583b6-0ab0-4f81-81d7-982643a6f3ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dc805ba-163b-463e-80b0-c1e41c96f578",
                "5789eba0-814a-408a-bdbc-836ea46317a3",
                "d32bb22a-fcde-409f-98c0-498ee861bf58",
                "96ad3481-5258-45d9-9cae-6e7f782caee3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "672235b1-c539-4f68-a4d0-cd5ef9f51e13",
              "title": "isServiceAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept allowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should accept allowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .true;",
                  "err": {},
                  "uuid": "e9baff3a-7ce5-4cd9-921d-37e0cdc65d3a",
                  "parentUUID": "672235b1-c539-4f68-a4d0-cd5ef9f51e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject disallowed service",
                  "fullTitle": "Negotiation Service Test Cases isServiceAcceptable should reject disallowed service",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'disallowed-service',\n    policies: [],\n};\n(0, chai_1.expect)(negotiationService.isServiceAcceptable(profile, service)).to.be\n    .false;",
                  "err": {},
                  "uuid": "cabd33ca-3ef8-43fc-b9aa-b65ca026e4fe",
                  "parentUUID": "672235b1-c539-4f68-a4d0-cd5ef9f51e13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9baff3a-7ce5-4cd9-921d-37e0cdc65d3a",
                "cabd33ca-3ef8-43fc-b9aa-b65ca026e4fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "21d31c15-21fc-4ac4-96d4-c1f9ff3648fe",
              "title": "canAcceptContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept valid contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should accept valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .true;",
                  "err": {},
                  "uuid": "27e53979-e40f-46c0-97a3-50e1fc7840b1",
                  "parentUUID": "21d31c15-21fc-4ac4-96d4-c1f9ff3648fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject inactive contract",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject inactive contract",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.status = 'inactive';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "07b7d5f3-a948-4bd6-aebe-b4af9ca8d148",
                  "parentUUID": "21d31c15-21fc-4ac4-96d4-c1f9ff3648fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable service offering",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable service offering",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "3ac314a4-1898-4105-b62f-66188b271d89",
                  "parentUUID": "21d31c15-21fc-4ac4-96d4-c1f9ff3648fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject contract with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases canAcceptContract should reject contract with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\n(0, chai_1.expect)(negotiationService.canAcceptContract(profile, contract)).to.be\n    .false;",
                  "err": {},
                  "uuid": "9d157a9a-1b42-453c-8864-a708549169ac",
                  "parentUUID": "21d31c15-21fc-4ac4-96d4-c1f9ff3648fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27e53979-e40f-46c0-97a3-50e1fc7840b1",
                "07b7d5f3-a948-4bd6-aebe-b4af9ca8d148",
                "3ac314a4-1898-4105-b62f-66188b271d89",
                "9d157a9a-1b42-453c-8864-a708549169ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
              "title": "negotiateContract",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return successful negotiation for valid contract",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return successful negotiation for valid contract",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.true;\n(0, chai_1.expect)(result.reason).to.be.undefined;",
                  "err": {},
                  "uuid": "4b96b954-2a62-414c-b827-6b044cd9a497",
                  "parentUUID": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable policies",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].policies.push({\n    description: 'disallowed-policy',\n    permission: [],\n    prohibition: [],\n});\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.include('disallowed-policy');",
                  "err": {},
                  "uuid": "55adeddb-df8e-4d63-a4d9-77aba8d126fc",
                  "parentUUID": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return failed negotiation with unacceptable services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should return failed negotiation with unacceptable services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings[0].serviceOffering = 'disallowed-service';\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptableServices).to.include('disallowed-service');",
                  "err": {},
                  "uuid": "3db289de-96d1-4d77-bc5a-d93d16aaa9a1",
                  "parentUUID": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors during negotiation",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should handle errors during negotiation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const corruptedContract = null;\nconst result = negotiationService.negotiateContract(profile, corruptedContract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.reason).to.equal('An error occurred during negotiation.');",
                  "err": {},
                  "uuid": "f6750d98-6cba-4b71-b2f9-24e7b86f72c6",
                  "parentUUID": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should identify multiple unacceptable policies and services",
                  "fullTitle": "Negotiation Service Test Cases negotiateContract should identify multiple unacceptable policies and services",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contract.serviceOfferings = [\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-1',\n        policies: [\n            {\n                description: 'disallowed-policy-1',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n    {\n        participant: 'test',\n        serviceOffering: 'disallowed-service-2',\n        policies: [\n            {\n                description: 'disallowed-policy-2',\n                permission: [],\n                prohibition: [],\n            },\n        ],\n    },\n];\nconst result = negotiationService.negotiateContract(profile, contract);\n(0, chai_1.expect)(result.canAccept).to.be.false;\n(0, chai_1.expect)(result.unacceptablePolicies).to.have.members([\n    'disallowed-policy-1',\n    'disallowed-policy-2',\n]);\n(0, chai_1.expect)(result.unacceptableServices).to.have.members([\n    'disallowed-service-1',\n    'disallowed-service-2',\n]);",
                  "err": {},
                  "uuid": "4d6bbb00-fa50-45ac-a9ec-cb71b4276a32",
                  "parentUUID": "fd7e3aa7-8ce5-45df-a050-5765c5c9f1be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b96b954-2a62-414c-b827-6b044cd9a497",
                "55adeddb-df8e-4d63-a4d9-77aba8d126fc",
                "3db289de-96d1-4d77-bc5a-d93d16aaa9a1",
                "f6750d98-6cba-4b71-b2f9-24e7b86f72c6",
                "4d6bbb00-fa50-45ac-a9ec-cb71b4276a32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "7a483ba9-b97d-4c32-aab8-4c68d5b85796",
              "title": "areServicePoliciesAcceptable",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept service with acceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should accept service with acceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'allowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.true;",
                  "err": {},
                  "uuid": "b85883a7-1b77-4773-9d58-adda306367ed",
                  "parentUUID": "7a483ba9-b97d-4c32-aab8-4c68d5b85796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject service with unacceptable policies",
                  "fullTitle": "Negotiation Service Test Cases areServicePoliciesAcceptable should reject service with unacceptable policies",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const service = {\n    participant: 'test',\n    serviceOffering: 'allowed-service',\n    policies: [\n        {\n            description: 'disallowed-policy',\n            permission: [],\n            prohibition: [],\n        },\n    ],\n};\n(0, chai_1.expect)(negotiationService.areServicePoliciesAcceptable(profile, service))\n    .to.be.false;",
                  "err": {},
                  "uuid": "f3ad3c70-819a-43e7-acec-091c55f18b4a",
                  "parentUUID": "7a483ba9-b97d-4c32-aab8-4c68d5b85796",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b85883a7-1b77-4773-9d58-adda306367ed",
                "f3ad3c70-819a-43e7-acec-091c55f18b4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "818a9c42-8fe7-4c02-afa2-9efdee7619a4",
              "title": "updateProfilePreferences",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add valid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should add valid preferences",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPreferences = [\n    {\n        policies: [{ policy: 'new-policy', frequency: 1 }],\n        services: ['new-service'],\n        ecosystems: ['new-ecosystem'],\n    },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, newPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength + 1);",
                  "err": {},
                  "uuid": "10819a91-8dbd-4f9f-bd23-9330abe0f406",
                  "parentUUID": "818a9c42-8fe7-4c02-afa2-9efdee7619a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should filter out invalid preferences",
                  "fullTitle": "Negotiation Service Test Cases updateProfilePreferences should filter out invalid preferences",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidPreferences = [\n    undefined,\n    null,\n    { policies: null, services: [], ecosystems: [] },\n];\nconst initialLength = profile.preference.length;\nnegotiationService.updateProfilePreferences(profile, invalidPreferences);\n(0, chai_1.expect)(profile.preference.length).to.equal(initialLength);",
                  "err": {},
                  "uuid": "fb5b1b3a-f06c-4b40-ba31-7d5568d02fcf",
                  "parentUUID": "818a9c42-8fe7-4c02-afa2-9efdee7619a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10819a91-8dbd-4f9f-bd23-9330abe0f406",
                "fb5b1b3a-f06c-4b40-ba31-7d5568d02fcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "4c17a0de-3eff-47cd-aa5c-757a83a87471",
              "title": "NegotiationService Singleton",
              "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.1.spec.ts",
              "file": "\\src\\tests\\contract.agent.1.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the same instance without refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return the same instance without refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService();\n(0, chai_1.expect)(instance1).to.equal(instance2);",
                  "err": {},
                  "uuid": "0bed778b-83f1-4a63-9de3-88957b6aff02",
                  "parentUUID": "4c17a0de-3eff-47cd-aa5c-757a83a87471",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a new instance with refresh",
                  "fullTitle": "Negotiation Service Test Cases NegotiationService Singleton should return a new instance with refresh",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const instance1 = NegotiationService_1.NegotiationService.retrieveService();\nconst instance2 = NegotiationService_1.NegotiationService.retrieveService(true);\n(0, chai_1.expect)(instance1).to.not.equal(instance2);",
                  "err": {},
                  "uuid": "5fe24d29-4720-4aca-9aac-816c4adbbe08",
                  "parentUUID": "4c17a0de-3eff-47cd-aa5c-757a83a87471",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bed778b-83f1-4a63-9de3-88957b6aff02",
                "5fe24d29-4720-4aca-9aac-816c4adbbe08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "afde615c-b549-4e9c-be8a-b4870426a4d4",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.3.spec.ts",
      "file": "\\src\\tests\\contract.agent.3.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8593231a-299c-4296-8a6f-f619059bd6cb",
          "title": "MongooseProvider Events Tests",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.3.spec.ts",
          "file": "\\src\\tests\\contract.agent.3.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"before all\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        provider = new MongooseProvider_1.MongooseProvider({\n            source: 'contracts',\n            url: 'mongodb://localhost:27017',\n            dbName: 'test',\n        });\n        provider.on('dataInserted', (event) => {\n            dataInsertedEventReceived = true;\n            dataInsertedPayload = event;\n        });\n        provider.on('dataUpdated', (event) => {\n            dataUpdatedEventReceived = true;\n            dataUpdatedPayload = event;\n        });\n        provider.on('dataDeleted', (event) => {\n            dataDeletedEventReceived = true;\n            dataDeletedPayload = event;\n        });\n        model = yield contract_model_mock_1.default.getModel();\n        yield provider.ensureReady();\n    })",
              "err": {},
              "uuid": "d1491296-df8f-404c-8afd-cded14ed982c",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"before each\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        dataInsertedEventReceived = false;\n        dataInsertedPayload = null;\n        dataUpdatedEventReceived = false;\n        dataUpdatedPayload = null;\n        dataDeletedEventReceived = false;\n        dataDeletedPayload = null;\n        yield model.deleteMany({});\n    })",
              "err": {},
              "uuid": "8095c723-97a2-49c4-8fa2-7d007aa60dfe",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"MongooseProvider Events Tests\"",
              "fullTitle": "MongooseProvider Events Tests \"after all\" hook in \"MongooseProvider Events Tests\"",
              "timedOut": false,
              "duration": 63,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield model.deleteMany({});\n        yield mongoose_1.default.disconnect();\n    })",
              "err": {},
              "uuid": "295a14c0-cbf3-46c4-b4a3-cefe246167b0",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should emit dataInserted event when saving a new document",
              "fullTitle": "MongooseProvider Events Tests should emit dataInserted event when saving a new document",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contractData = {\n            uid: 'test-contract-1',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            members: [\n                {\n                    participant: 'test-participant',\n                    role: 'test-role',\n                    signature: 'test-signature',\n                },\n            ],\n            status: 'pending',\n            serviceOfferings: [],\n            rolesAndObligations: [],\n            purpose: [],\n            revokedMembers: [],\n        };\n        const contract = new model(contractData);\n        yield contract.save();\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataInsertedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataInsertedPayload).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument.uid).to.equal(contractData.uid);\n    })",
              "err": {},
              "uuid": "2a885e81-3e39-46b0-93df-10da5b9f648c",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataInserted event when creating via model.create()",
              "fullTitle": "MongooseProvider Events Tests should emit dataInserted event when creating via model.create()",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contractData = {\n            uid: 'test-contract-1',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            members: [\n                {\n                    participant: 'test-participant',\n                    role: 'test-role',\n                    signature: 'test-signature',\n                },\n            ],\n            status: 'pending',\n            serviceOfferings: [],\n            rolesAndObligations: [],\n            purpose: [],\n            revokedMembers: [],\n        };\n        yield model.create(contractData);\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataInsertedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataInsertedPayload).to.exist;\n        (0, chai_1.expect)(dataInsertedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataInsertedPayload.fullDocument.uid).to.equal(contractData.uid);\n    })",
              "err": {},
              "uuid": "8e5fec45-124b-486c-b4fd-6496029d8462",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataUpdated event when updating via model.updateOne()",
              "fullTitle": "MongooseProvider Events Tests should emit dataUpdated event when updating via model.updateOne()",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contract = yield model.create({\n            uid: 'test-contract-2',\n            profile: 'old-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            status: 'pending',\n        });\n        yield model.updateOne({ _id: contract._id }, { $set: { profile: 'new-profile' } });\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataUpdatedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataUpdatedPayload).to.exist;\n        (0, chai_1.expect)(dataUpdatedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataUpdatedPayload.updateDescription).to.exist;\n    })",
              "err": {},
              "uuid": "5d44c497-7a35-4846-b3db-b3f4bf9b924b",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataDeleted event when deleting via model.deleteOne()",
              "fullTitle": "MongooseProvider Events Tests should emit dataDeleted event when deleting via model.deleteOne()",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const contract = yield model.create({\n            uid: 'test-contract-3',\n            profile: 'test-profile',\n            ecosystem: 'test-ecosystem',\n            orchestrator: 'test-orchestrator',\n            status: 'pending',\n        });\n        yield model.deleteOne({ _id: contract._id });\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        (0, chai_1.expect)(dataDeletedEventReceived).to.be.true;\n        (0, chai_1.expect)(dataDeletedPayload).to.exist;\n        (0, chai_1.expect)(dataDeletedPayload.source).to.equal('contracts');\n        (0, chai_1.expect)(dataDeletedPayload.documentKey).to.exist;\n    })",
              "err": {},
              "uuid": "61de4b99-d20c-48fa-9c75-d1d1d0e7b528",
              "parentUUID": "8593231a-299c-4296-8a6f-f619059bd6cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a885e81-3e39-46b0-93df-10da5b9f648c",
            "8e5fec45-124b-486c-b4fd-6496029d8462",
            "5d44c497-7a35-4846-b3db-b3f4bf9b924b",
            "61de4b99-d20c-48fa-9c75-d1d1d0e7b528"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "1fc82444-3d20-462e-a134-c4030a888d6d",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.4.spec.ts",
      "file": "\\src\\tests\\contract.agent.4.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88d314d2-968c-4e11-98ee-058dbd885067",
          "title": "ContractAgent with MongooseProvider",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.agent.4.spec.ts",
          "file": "\\src\\tests\\contract.agent.4.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ContractAgent with MongooseProvider\"",
              "fullTitle": "ContractAgent with MongooseProvider \"before all\" hook in \"ContractAgent with MongooseProvider\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    model = yield contract_model_mock_1.default.getModel();\n    agent = yield ContractAgent_1.ContractAgent.retrieveService(MongooseProvider_1.MongooseProvider);\n    updateProfileFromContractChangeSpy = sinon_1.default.spy(ContractAgent_1.ContractAgent.prototype, 'updateProfileFromContractChange');\n});",
              "err": {},
              "uuid": "8c5fb618-ada4-4bf2-9d68-cae5cab4dc06",
              "parentUUID": "88d314d2-968c-4e11-98ee-058dbd885067",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"ContractAgent with MongooseProvider\"",
              "fullTitle": "ContractAgent with MongooseProvider \"after all\" hook in \"ContractAgent with MongooseProvider\"",
              "timedOut": false,
              "duration": 1016,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    updateProfileFromContractChangeSpy.restore();\n    if (model) {\n        yield model.deleteMany({});\n    }\n    yield Promise.all([\n        mongoose_1.default.disconnect(),\n        new Promise((resolve) => setTimeout(resolve, 1000)),\n    ]);\n});",
              "err": {},
              "uuid": "0f6dbd2a-f792-4b25-99ce-a5951895a709",
              "parentUUID": "88d314d2-968c-4e11-98ee-058dbd885067",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should initialize correctly and trigger handleDataInserted via create",
              "fullTitle": "ContractAgent with MongooseProvider should initialize correctly and trigger handleDataInserted via create",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield model.create({\n        ecosystem: 'test-ecosystem',\n        serviceOfferings: [\n            {\n                participant: 'test-participant',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    {\n                        description: 'allowed-policy',\n                        permission: [],\n                        prohibition: [],\n                    },\n                ],\n            },\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "36f757c5-7524-4827-bb0c-c784ed2b1fd4",
              "parentUUID": "88d314d2-968c-4e11-98ee-058dbd885067",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should initialize correctly and trigger handleDataInserted via save",
              "fullTitle": "ContractAgent with MongooseProvider should initialize correctly and trigger handleDataInserted via save",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const contract = new model();\n    updateProfileFromContractChangeSpy.resetHistory();\n    yield contract.save({\n        ecosystem: 'test-ecosystem',\n        serviceOfferings: [\n            {\n                participant: 'test-participant',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    {\n                        description: 'allowed-policy',\n                        permission: [],\n                        prohibition: [],\n                    },\n                ],\n            },\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "c2ef9673-89a3-40ad-977e-2bd030ed3700",
              "parentUUID": "88d314d2-968c-4e11-98ee-058dbd885067",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trigger updateProfileFromContractChange on update",
              "fullTitle": "ContractAgent with MongooseProvider should trigger updateProfileFromContractChange on update",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const doc = yield model.create({\n        ecosystem: 'test-ecosystem-update',\n        serviceOfferings: [\n            {\n                participant: 'test-participant-update',\n                serviceOffering: 'allowed-service',\n                policies: [\n                    { description: 'allowed-policy', permission: [], prohibition: [] },\n                ],\n            },\n        ],\n        members: [],\n        orchestrator: '',\n        purpose: [],\n        revokedMembers: [],\n        rolesAndObligations: [],\n    });\n    updateProfileFromContractChangeSpy.resetHistory();\n    yield model.findByIdAndUpdate(doc._id, {\n        $set: { ecosystem: 'updated-ecosystem' },\n    });\n    yield delay(100);\n    yield new Promise(setImmediate);\n    sinon_1.default.assert.calledOnce(updateProfileFromContractChangeSpy);\n});",
              "err": {},
              "uuid": "21f1bac6-efd5-4392-a5e2-19461cc89139",
              "parentUUID": "88d314d2-968c-4e11-98ee-058dbd885067",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36f757c5-7524-4827-bb0c-c784ed2b1fd4",
            "c2ef9673-89a3-40ad-977e-2bd030ed3700",
            "21f1bac6-efd5-4392-a5e2-19461cc89139"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 431,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "7e28131f-35f1-41bd-ace1-f3b9e947d462",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.dataprovider.0.spec.ts",
      "file": "\\src\\tests\\contract.dataprovider.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
          "title": "DataProvider Events Test Cases",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.dataprovider.0.spec.ts",
          "file": "\\src\\tests\\contract.dataprovider.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DataProvider Events Test Cases\"",
              "fullTitle": "DataProvider Events Test Cases \"before all\" hook in \"DataProvider Events Test Cases\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const config = {\n        url: 'mongodb://localhost:27017',\n        dbName: 'contract_consent_agent_db',\n        source: collection,\n    };\n    mongoProvider = new MongoDBProvider_1.MongoDBProvider(config);\n    yield mongoProvider.ensureReady();\n    agentTest = new AgentTest(mongoProvider);\n});",
              "err": {},
              "uuid": "021bb858-4d4f-4e0b-b752-5425c68a29c6",
              "parentUUID": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"DataProvider Events Test Cases\"",
              "fullTitle": "DataProvider Events Test Cases \"after each\" hook in \"DataProvider Events Test Cases\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "agentTest.handleDataInsertedSpy.resetHistory();\nagentTest.handleDataUpdatedSpy.resetHistory();\nagentTest.handleDataDeletedSpy.resetHistory();",
              "err": {},
              "uuid": "66d6a3c4-cc57-4bf6-9005-a7753ee4f0ca",
              "parentUUID": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should emit dataInserted event when creating a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataInserted event when creating a document",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test', value: 123 };\n    const result = yield mongoProvider.create(testData);\n    (0, chai_1.expect)(agentTest.handleDataInsertedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataInsertedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('fullDocument');\n    (0, chai_1.expect)(eventData.fullDocument).to.include(testData);\n    if (result._id) {\n        yield mongoProvider.delete(result._id.toString());\n    }\n});",
              "err": {},
              "uuid": "80e633b0-24aa-4282-b6f9-4a0b95a43d11",
              "parentUUID": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataUpdated event when updating a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataUpdated event when updating a document",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test-update', value: 456 };\n    const created = yield mongoProvider.create(testData);\n    agentTest.handleDataInsertedSpy.resetHistory();\n    const updateData = { value: 789 };\n    const criteria = {\n        conditions: [\n            {\n                field: '_id',\n                operator: types_1.FilterOperator.EQUALS,\n                value: created._id,\n            },\n        ],\n        threshold: 0,\n    };\n    yield mongoProvider.update(criteria, updateData);\n    (0, chai_1.expect)(agentTest.handleDataUpdatedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataUpdatedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('documentKey');\n    (0, chai_1.expect)(eventData).to.have.property('updateDescription');\n    if (created._id) {\n        yield mongoProvider.delete(created._id.toString());\n    }\n});",
              "err": {},
              "uuid": "b3012f0f-5343-48e3-b64f-b4cdf26015a8",
              "parentUUID": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit dataDeleted event when deleting a document",
              "fullTitle": "DataProvider Events Test Cases should emit dataDeleted event when deleting a document",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const testData = { name: 'test-delete', value: 999 };\n    const created = yield mongoProvider.create(testData);\n    agentTest.handleDataInsertedSpy.resetHistory();\n    if (created._id) {\n        yield mongoProvider.delete(created._id.toString());\n    }\n    (0, chai_1.expect)(agentTest.handleDataDeletedSpy.calledOnce).to.be.true;\n    const eventData = agentTest.handleDataDeletedSpy.firstCall.args[0];\n    (0, chai_1.expect)(eventData).to.have.property('source', collection);\n    (0, chai_1.expect)(eventData).to.have.property('documentKey');\n});",
              "err": {},
              "uuid": "92656a9c-4497-4238-971d-5baa08792fc5",
              "parentUUID": "b8121f8f-1c0f-41ba-96f7-2fd787145c78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80e633b0-24aa-4282-b6f9-4a0b95a43d11",
            "b3012f0f-5343-48e3-b64f-b4cdf26015a8",
            "92656a9c-4497-4238-971d-5baa08792fc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    },
    {
      "uuid": "0699d004-2ecd-4083-b57b-572759112159",
      "title": "",
      "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.router.0.spec.ts",
      "file": "\\src\\tests\\contract.router.0.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f020892-adb8-4060-b149-120103cb1b50",
          "title": "ContractAgent Router Tests",
          "fullFile": "C:\\Users\\E\\Desktop\\visions\\dev\\cca-ptx\\contract-agent\\src\\tests\\contract.router.0.spec.ts",
          "file": "\\src\\tests\\contract.router.0.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"ContractAgent Router Tests\"",
              "fullTitle": "ContractAgent Router Tests \"before all\" hook in \"ContractAgent Router Tests\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    Agent_1.Agent.setConfigPath('./mocks/contract-agent.config.json', __filename);\n    requestHandler = yield ContractAgentHandler_1.RequestHandler.retrieveService();\n    const contractAgent = yield requestHandler.getContractAgent();\n    const profile = yield contractAgent.createProfileForParticipant('some-participant-uri');\n    profileURI = (_a = profile.uri) !== null && _a !== void 0 ? _a : profileURI;\n    getPoliciesRecommendationFromProfileSpy = sinon_1.default.spy(requestHandler, 'getPoliciesRecommendationFromProfile');\n    getServicesRecommendationFromProfileSpy = sinon_1.default.spy(requestHandler, 'getServicesRecommendationFromProfile');\n    getPoliciesMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getPoliciesMatchingFromProfile');\n    getServicesMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getServicesMatchingFromProfile');\n    getContractMatchingFromProfileSpy = sinon_1.default.spy(requestHandler, 'getContractMatchingFromProfile');\n    getConfigurationsFromProfileSpy = sinon_1.default.spy(requestHandler, 'getConfigurationsFromProfile');\n    addConfigurationsToProfileSpy = sinon_1.default.spy(requestHandler, 'addConfigurationsToProfile');\n    updateConfigurationsForProfileSpy = sinon_1.default.spy(requestHandler, 'updateConfigurationsForProfile');\n    removeConfigurationsFromProfileSpy = sinon_1.default.spy(requestHandler, 'removeConfigurationsFromProfile');\n});",
              "err": {},
              "uuid": "e37d8d58-4af0-4f2d-a358-18290df6414b",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"ContractAgent Router Tests\"",
              "fullTitle": "ContractAgent Router Tests \"after all\" hook in \"ContractAgent Router Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getPoliciesRecommendationFromProfileSpy.restore();\ngetServicesRecommendationFromProfileSpy.restore();\ngetPoliciesMatchingFromProfileSpy.restore();\ngetServicesMatchingFromProfileSpy.restore();\ngetContractMatchingFromProfileSpy.restore();\ngetConfigurationsFromProfileSpy.restore();\naddConfigurationsToProfileSpy.restore();\nupdateConfigurationsForProfileSpy.restore();\nremoveConfigurationsFromProfileSpy.restore();",
              "err": {},
              "uuid": "74dd8862-5a94-45ea-a1e1-226095046737",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get policies recommendations from profile",
              "fullTitle": "ContractAgent Router Tests should get policies recommendations from profile",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/policies-recommendations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getPoliciesRecommendationFromProfileSpy);\n    sinon_1.default.assert.calledWith(getPoliciesRecommendationFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "6b988895-9806-4979-8e7f-de24c98b231d",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get services recommendations from profile",
              "fullTitle": "ContractAgent Router Tests should get services recommendations from profile",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/services-recommendations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getServicesRecommendationFromProfileSpy);\n    sinon_1.default.assert.calledWith(getServicesRecommendationFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "91677dfe-69be-4aa6-ab13-120fbd2701d8",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get policies matching from profile",
              "fullTitle": "ContractAgent Router Tests should get policies matching from profile",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .get(`/api/profile/${profileURI}/policies-matching`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(getPoliciesMatchingFromProfileSpy);\n    sinon_1.default.assert.calledWith(getPoliciesMatchingFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.be.an('array');\n});",
              "err": {},
              "uuid": "47a7a9ca-4430-4b36-8748-2e99b3e4c482",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle adding configurations to profile",
              "fullTitle": "ContractAgent Router Tests should handle adding configurations to profile",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const configurations = [{ configId: 'config1' }];\n    const response = yield (0, supertest_1.default)(app)\n        .post('/api/profile/configurations')\n        .send({ profileURI, configurations })\n        .expect(201);\n    sinon_1.default.assert.calledOnce(addConfigurationsToProfileSpy);\n    sinon_1.default.assert.calledWith(addConfigurationsToProfileSpy, profileURI, configurations);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "c4b844e6-983b-4529-ba0f-83f0336fa7cb",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle updating configurations for profile",
              "fullTitle": "ContractAgent Router Tests should handle updating configurations for profile",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const configurations = [{ configId: 'config2' }];\n    const response = yield (0, supertest_1.default)(app)\n        .put(`/api/profile/${profileURI}/configurations`)\n        .send({ configurations })\n        .expect(200);\n    sinon_1.default.assert.calledOnce(updateConfigurationsForProfileSpy);\n    sinon_1.default.assert.calledWith(updateConfigurationsForProfileSpy, profileURI, configurations);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "2082cd2f-707a-4cc1-b51f-4029b48c6664",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle deleting configurations from profile",
              "fullTitle": "ContractAgent Router Tests should handle deleting configurations from profile",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield (0, supertest_1.default)(app)\n        .delete(`/api/profile/${profileURI}/configurations`)\n        .expect(200);\n    sinon_1.default.assert.calledOnce(removeConfigurationsFromProfileSpy);\n    sinon_1.default.assert.calledWith(removeConfigurationsFromProfileSpy, profileURI);\n    (0, chai_1.expect)(response.body).to.have.property('success', true);\n});",
              "err": {},
              "uuid": "bc70ea24-8738-4557-bd0e-1ed58a4a87c2",
              "parentUUID": "0f020892-adb8-4060-b149-120103cb1b50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b988895-9806-4979-8e7f-de24c98b231d",
            "91677dfe-69be-4aa6-ab13-120fbd2701d8",
            "47a7a9ca-4430-4b36-8748-2e99b3e4c482",
            "c4b844e6-983b-4529-ba0f-83f0336fa7cb",
            "2082cd2f-707a-4cc1-b51f-4029b48c6664",
            "bc70ea24-8738-4557-bd0e-1ed58a4a87c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 89,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "contract.agent.0.spec.ts",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report/contract",
        "reportFilename": "contract.agent.0.spec.ts"
      },
      "version": "6.2.0"
    }
  }
}